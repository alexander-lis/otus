*** Описание работы ***
Домашняя работа №10.
Репозиторий: https://github.com/alexander-lis/otus

Реализация распределенной транзакции с помощью паттерна сага.

Представленный в задаче сценарий был скорректирован с учетом предметной области проектной работы.

Сценарий:
- Пользователь бронирует самокат в OrdersService, публикуется событие OrderCreated.
- BillingService слушает событие OrderCreated и производит попытку оплатить бронь.
- Если оплата прошла успешно, то отправляется команда NotifyOrderPaymentSucceded в NotificationService.
- Если оплата прошла неуспешно, то отправляется команда NotifyOrderPaymentDeclined в NotificationService и публикуется событие OrderPaymentDeclined.
- OrdersService слушает событие OrderPaymentDeclined и откатывает операцию брони.
- NotificationService выполняет команды NotifyOrderPaymentSucceded или NotifyOrderPaymentDeclined и уведомляет пользователя об успешной или нуспешной оплате соответственно.

Использованный паттерн:
- Использван хореографической способ координации саги, где оркестратор отсутствует.
- Операция брони самоката в OrdersService является компенсируемой и откатывается в случае неуспешной оплаты в BillingService.
- Операция оплаты бронии в BillingService является поворотной, после выполнения которой сага должна быть выполнена до конца.
- Операция уведомления в NotificationService является повторяемой и будет повторяться до тех пор, пока уведомление не будет отправлено пользователю.

Сценарий тестов postman:
- Зарегистрировать пользователя 1.
- Создать самокат 1 в сервисе управления парков самокатов.
- Создать самокат 2 в сервисе управления парков самокатов.
- Проверить, что в сервисе бронирования создались записи со статусами для самокатов 1 и 2.
- Забронировать самокат 1 со стоимостью поездки не превышающей баланс пользователя.
- Проверить что самокат 1 находится в статусе "Занят".
- Забронировать самокат 2 со стоимостью поездки превышающей баланс пользователя.
- Проверить что самокат 2 находится в статусе "Свободен".

*** Установка приложения и запуск тестов ***
Все действия выполнялись в Minikube.
1. Перейти в папку "hw10-lecture28/myapp-chart".
2. Выполнить команду "helm install myapp . -f values.yaml" или "helm install myapp . -f values-arm.yaml" в зависимости от процессора.
3. Тестирование:
- Перейти в папку "hw10-lecture28/postman".
- Открыть в Postman коллекцию "otus_hw10.postman_collection.json" и запустить тесты.
- Или выполнить команду "newman run otus_hw10.postman_collection.json".