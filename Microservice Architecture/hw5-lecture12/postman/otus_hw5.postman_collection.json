{
	"info": {
		"_postman_id": "45711156-ee19-4976-b022-1ba43a825fcc",
		"name": "otus_hw5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register USER 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Register user 1 returns 200\", () => {",
							"    pm.response.to.have.status(200);",
							"    console.info(pm.request.body.raw)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var login1 = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
							"var password1 =  pm.variables.replaceIn(\"{{$randomPassword}}\");",
							"pm.variables.set(\"hw5_login1\", login1);",
							"pm.variables.set(\"hw5_password1\", password1);",
							"",
							"var login2 = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
							"var password2 =  pm.variables.replaceIn(\"{{$randomPassword}}\");",
							"pm.variables.set(\"hw5_login2\", login2);",
							"pm.variables.set(\"hw5_password2\", password2);",
							"",
							"/*",
							"console.info(\"login 1 = \" + login1);",
							"console.info(\"password 1 = \" + password1);",
							"console.info(\"login 2 = \" + login2);",
							"console.info(\"password 2 = \" + password2);",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"login\": \"{{hw5_login1}}\",\n    \"password\": \"{{hw5_password1}}\",\n    \"name\": \"{{hw5_login1}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{auth_port}}/auth/Register",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"auth",
						"Register"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE account NOAUTH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update user without login returns 401\", () => {",
							"    pm.response.to.have.status(401);",
							"    console.info(pm.request.headers.get(\"Authorization\"));",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "12345",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"UpdatedUser1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{auth_port}}/auth/Account",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"auth",
						"Account"
					]
				}
			},
			"response": []
		},
		{
			"name": "READ account NOAUTH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Read user without login returns 401\", () => {",
							"    pm.response.to.have.status(401);",
							"    console.info(pm.request.headers.get(\"Authorization\"));",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "12345",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{url}}:{{auth_port}}/auth/Account",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"auth",
						"Account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login USER 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login user 1 returns 200\", () => {",
							"    pm.response.to.have.status(200);",
							"    pm.variables.set(\"hw5_token1\", pm.response.text());",
							"    console.info(\"JWT Token:\" + pm.response.text());",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{url}}:{{auth_port}}/auth/Token?login={{hw5_login1}}&password={{hw5_password1}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"auth",
						"Token"
					],
					"query": [
						{
							"key": "login",
							"value": "{{hw5_login1}}"
						},
						{
							"key": "password",
							"value": "{{hw5_password1}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE account AUTH1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Set user 1 name to 'UpdatedUser1' returns 200\", () => {",
							"    pm.response.to.have.status(200);",
							"    console.info(pm.request.headers.get(\"Authorization\"));",
							"    console.info(pm.request.body.raw)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hw5_token1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"UpdatedUser1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{auth_port}}/auth/Account",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"auth",
						"Account"
					]
				}
			},
			"response": []
		},
		{
			"name": "READ account AUTH1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Read user 1 returns 200\", () => {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Read user 1 returns updated name\", () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.name).to.eql(\"UpdatedUser1\");",
							"    console.info(pm.request.headers.get(\"Authorization\"));",
							"    console.info(responseJson)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hw5_token1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{url}}:{{auth_port}}/auth/Account",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"auth",
						"Account"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register USER 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Register user 2 returns 200\", () => {",
							"    pm.response.to.have.status(200);",
							"    console.info(pm.request.body.raw)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"login\": \"{{hw5_login2}}\",\n    \"password\": \"{{hw5_password2}}\",\n    \"name\": \"{{hw5_login2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{auth_port}}/auth/Register",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"auth",
						"Register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login USER 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Login user 2 returns 200\", () => {",
							"    pm.response.to.have.status(200);",
							"    pm.variables.set(\"hw5_token1\", pm.response.text());",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{url}}:{{auth_port}}/auth/Token?login={{hw5_login2}}&password={{hw5_password2}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"auth",
						"Token"
					],
					"query": [
						{
							"key": "login",
							"value": "{{hw5_login2}}"
						},
						{
							"key": "password",
							"value": "{{hw5_password2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "READ account AUTH2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Read user 2 returns 200\", () => {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"Read user 2 returns user 2 name not user 1\", () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.name).to.eql(pm.variables.get(\"hw5_login2\"));",
							"    console.info(pm.request.headers.get(\"Authorization\"));",
							"    console.info(responseJson)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{hw5_token1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{url}}:{{auth_port}}/auth/Account",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{auth_port}}",
					"path": [
						"auth",
						"Account"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "port",
			"value": "80"
		},
		{
			"key": "protocol",
			"value": "http",
			"type": "string"
		},
		{
			"key": "url",
			"value": "arch.homework",
			"type": "string"
		},
		{
			"key": "auth_port",
			"value": "80",
			"type": "string"
		}
	]
}