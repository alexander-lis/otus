*** Структура приложения ***
- Сервис аутентификации:
    Написан сервис для регистрации и аутентификации пользователей.
    Сервис так же позволяет посмотреть или отредактировать информацию текущего залогиненного пользователя.

    Если пользователь не залогинен, то запросы на просмотр или редактирование пользователя вернут 401 ошибку.

    Аутентификация проводится с использованием JWT Token'а.

- Сервис бизнес-логики:
    Пока это один сервис, по сути заглушка, которая будет реализована и разбита на другие микросервисы по мере развития курсовой работы.

- Роутинг между сервисами:
Маршрутизаци настроена с помощью ingress'a. Все запросы по /auth попадают на сервис аутентификации, все запросы по /back попадают на сервис бизнес-логики.

*** Установка приложения и запуск тестов ***
Все действия выполнялись в Minikube.
1. Перейти в папку "hw5-lecture12/myapp-chart".
2. Выполнить команду "helm install myapp . -f values.yaml" или "helm install myapp . -f values-arm.yaml" в зависимости от процессора.
3. Конечные точки приложения:
- POST http://arch.homework/auth/Register - регистрация пользователя.
- POST http://arch.homework/auth/Token?login=<login>&password=<password> - аутентификация пользователя.
- GET http://arch.homework/auth/Account - профиль текущего пользователе (должен быть передан JWT Token).
- UPDATE http://arch.homework/auth/Account - редактирование профиля текущего пользователя (должен быть передан JWT Token).
4. Тестирование:
- При прогоне тестов автоматически генерируются login/password для пользователей 1 и 2 и запускаются тесты повторяющие сценарий описанный в задании.
- Перейти в папку "hw5-lecture12/postman".
- Открыть в Postman коллекцию "otus_hw5.postman_collection.json" и запустить тесты.
- Или выполнить команду "newman run otus_hw5.postman_collection.json". Актуальные body ответов и запросов, а так же заголовки авторизации логируются в консоль.